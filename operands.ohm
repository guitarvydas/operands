Operand {
Main = operand+
operand =
  | inputPort                 -- input
  | outputPort                -- output
  | self                      -- self
  | genericDateTime           -- datetime
  | numericalValue            -- numerical
  | compoundOperand           -- compound
  | keywordOperand            -- keyword
  
compoundOperand =
  | "<" (~">" any)+ ">"       -- hypertext
  | "%" symbol ("/" symbol)*  -- file
  | symbol "://"              -- url
  | symbol "@" symbol         -- email

keywordOperand =
  | "none" ~letter            -- none
  | "yes" ~letter             -- yes
  | "no"  ~letter             -- no

genericDateTime =
  | dateTimeTimeZone
  | dateTime
  | date
  | time


dateTimeTimeZone = date "-" time "-" timeZone
dateTime = date "-" time
date = year "-" month "-" day
time = hours ":" minutes ":" seconds
year = digit digit digit digit
month = digit digit?
day = digit digit?
timeZone = digit digit? ":" digit digit
hours = digit digit
minutes = digit digit
seconds = digit digit

numericalValue =
  | "$" digit+ "." digit digit       -- dollar
  | "##" base64digit+                -- base64
  | "#" base16digit+                 -- hex
  | integer "x" integer              -- coordinate
  | integer ".." integer             -- range
  | integer "." integer "." integer  -- tuple
  | integer "." integer              -- floatingpoint
  | integer "," integer              -- eufloatingpoint
  | integer

base16digit = digit | "A" .. "F" | "a" .. "f"
base64digit = digit | "A" .. "Z" | "a" .. "z"
integer = digit+

string = dq (~dq any)* dq
dq = "\""
nestablestring =
  | beginquote nestableStringInner endquote

nestableStringInner =
  | beginquote nestableStringInner endquote
  | (~enquote any)*

beginquote = "“"
endquote = "”"

symbol =
  | beginbracket symbolInner endbracket
  | ~space any
  
symbolInner = 
  | beginbracket symbolInner endbracket
  | (~endbracket any)*


beginbracket = "❲"
endbracket = "❳"

outputPort = symbol "➤"
inputPort = "◦" symbol
self = š
}


// deal with allocation
// local
// parameter
// temp
// global? free?
// function
// function with 1 parameter
// predicate
// predicate with 1 parameter
// action
// action with 1 parameter
